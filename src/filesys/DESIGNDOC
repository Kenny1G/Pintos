             +-------------------------+
             |         CS 212          |
             | PROJECT 4: FILE SYSTEMS |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Eva Batelaan       <batelaan@stanford.edu>
Kenny Oseleononmen <kenny1g@stanford.edu>
Akram Sbaih        <akram@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

             INDEXED AND EXTENSIBLE FILES
             ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In INODE.c

/* Indexed Inodes Constants */
// Number of Blocks
#define INODE_NUM_BLOCKS 125
#define INODE_NUM_DIRECT 122
#define INODE_NUM_INDIRECT 1
#define INODE_NUM_DUBINDIRECT 2
// Size of Blocks
#define INODE_DIRECT_SIZE (INODE_NUM_DIRECT * BLOCK_SECTOR_SIZE) // 62,464
#define INODE_INDIRECT_SIZE INODE_DIRECT_SIZE
#define INODE_DUBINDIRECT_SIZE (INODE_NUM_DIRECT * INODE_INDIRECT_SIZE)
        // 7,620,608
// Index of Blocks
#define INODE_INDIRECT_INDEX INODE_NUM_DIRECT
#define INODE_DUBINDIRECT_INDEX (INODE_NUM_DIRECT + INODE_NUM_INDIRECT)
// Byte offset of blocks
#define INODE_INDIRECT_OFFSET INODE_DIRECT_SIZE
#define INODE_DUBINDIRECT_OFFSET (INODE_DIRECT_SIZE +
                                  INODE_NUM_INDIRECT * INODE_INDIRECT_SIZE)

/* On-disk inode.
   Must be exactly BLOCK_SECTOR_SIZE bytes long. */
struct inode_disk
  {
    uint8_t unused[3];                  /* Padding. */
    bool is_dir;                        /* Directory status */
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    uint32_t blocks[125];               /* Not used. */
  };

/* In-memory inode. */
struct inode
  {
    struct list_elem elem;              /* Element in inode list. */
    block_sector_t sector;              /* Sector number of disk location. */
    bool is_dir;                        /* Directory status */
    off_t length;                       /* Length of file */
    int open_cnt;                       /* Number of openers. */
    bool removed;                       /* True if deleted, false otherwise. */
    int deny_write_cnt;                 /* 0: writes ok; >0: deny writes. */
    struct lock inode_lock;             /* Lock since inode is shared struct */
  };

FREE_MAP.C
static struct lock free_map_lock;    /* Lock on free_map since shared */


>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

There are
112 direct blocks in the source inode
1 indirect block
  which has 122 direct blocks
2 doubly indirect blocks
  which each have 122 indirect blocks
    which each have 122 direct blocks...
All direct blocks are 512 bytes

direct level: 122 * 512 = 62,464 bytes
indirect level: 122 * 512 = 62,464 bytes
dobly indirect level: 2 * 122 * 122 * 512 = 15,241,216 bytes

Total: 15,366,144 bytes

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

The byte_to_sector function, which searches for the sector block requires the
current thread to acquire the inode lock, making it atomic. Therefore, if two
threads try to access the same block past the end of the file, only one thread
will actually allocate a new block, and the other thread will retrieve the
newly allocated block once the first thread has finished searching for the
sector. In order to be able to change the length of an inode, a thread has to
first aquire the lock associated with the inode. Therefore, no two
thread can change the length variable at a time either, and the length variable
will reflect the longer of the two lengths once both threads have returned.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

A thread cannot read beyond the length of a file, and a file's length only
changes once it has finished witing to all the sectors. Therefore, A will see
no data if it tried to read at the same time that B tried to write unless B
has already finished writing.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

Since reads are non atomic operations and writes are only atomic if they are
extending the file, the synchronization when writing to an inode is
approximately as fair as the thread scheduler itself.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Our inode structure is a multilevel index. We chose to have 2 indirect blocks
because it allowed us to easily achieve the 8MB requirement. Our representation
resembles the unix file system which has 1 indirect block, 1 doubly indirect
block and 1 triply indirect block. Since a doubly indirect block provided us
with sufficient space for the 8MB requirement, we decided we could just use
another doubly indirect block instead of dealing with a more complicated
triply indirect block. We chose to use a shared constant to dileniate the
number of direct blocks and indirect blocks that can be allocated in an
indirect block and doubly indirect block, respectively, for the sake of
simplicity. This choice result in 3 block sectors going unused in each of the
indirect and doubly indirect blocks. We also considered using 125 indirect
blocks, which would have made our max file size exactly 8MB; however, we
figured that having many direct blocks would make access time simpler for
smaller files. In addition, we did not really need the indirect block to
achieve adequate file size; however, we thought it would make accesses for
medium size files easier.

                SUBDIRECTORIES
                ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

                 BUFFER CACHE
                 ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
