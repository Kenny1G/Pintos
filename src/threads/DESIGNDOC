            +--------------------+
            |        CS 212      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Eva Batelaan       <batelaan@stanford.edu>
Kenny Oseleononmen <kenny1g@stanford.edu>
Akram Sbaih        <akram@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:
    int64_t wake_tick;                  /* Number of ticks left to sleep*/
    struct semaphore *sleep_sema;       /* Semaphore to sleep and wake thread*/
    struct list_elem slept_elem;        /* List element for slept_threads list*/

A list of slept threads was added so all threads don't have to be checked to 
find those that should be woken up.
    static struct list slept_list;

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep() intiializes a new semaphore, to whose location on
the stack the currently running thread points. The function then
sets wake_tick for the current thread, adds the thread to 
slept_list, the priority queue of sleeping threads (implemented 
using the provided list structure). Finally, it downs the semaphore 
that is now associted with the recently slept thread.

In the timer interrupt handler, we call thread_wake_eligible_slept. 
In the function, we iterate through the priority queue of sleeping
threads, upping the semaphores of the threads who have exhaused
their sleep time, until we reach a thread who has not yet exhausted 
their sleep time or the end of the list. 

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

By adding a list that contains only threads that are asleep the kernel 
doesn't have to iterate through every single thread to wake those that 
are due to wake. In addition, we chose to indicate when a timer should
wake by setting wake_tick equal to the current number timer ticks
plus the number of ticks for which the thread is supposed to sleep.
This allowed us to implement a priority queue to hold the sleeping
threads and made it so that we would not even have to check every
sleeping thread only up to the first thread that's not reday to be 
woken up. 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

The only shared variable between threads is the slept_list. Since
we implemented a priority queue for our list, the order in which
threads are added to the slept_list matters. Therefore, we disabled
interrupts in thread_add_to_slept, where the current thread is
is added to slept_list.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

The only race condition we need to worry about is a thread being interrupted after
it's added to the slept list but before it's slept. In this case it would be possible
for the thread to be removed from the slept list before it ever sleeps and then
when we return to timer_sleep, the thread is slept with no way of waking it up.

Since we are using a semaphore, this deadlock will not happen because when the
thread is removed from the slept_list, it's semaphore goes up to 1 and so when
sema down is called the thread never sleeps.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This design was chosen as it makes use of existing synchronization primitives as
opposed to direclty calling thread_block () and unblock(). It is also faster than
using thread_foreach () to check for threads that need to be awoken with the
drawback being the fact that the size of the thread struct had to be increased.
furthermore, By using a priority-queue, we shorten the amount of time spent
finding threads to wake up.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
