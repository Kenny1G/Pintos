            +---------------------------+
            |          CS 212           |
            | PROJECT 3: VIRTUAL MEMORY |
            |      DESIGN DOCUMENT      |
            +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Akram Sbaih        <akram@stanford.edu>
Eva Batelaan       <batelaan@stanford.edu>
Kenny Oseleononmen <kenny1g@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
/* Hand of the clock algorithm */
static struct list_elem *clock_hand;
This static variable will be used to keep track of the clock hand in the list 
of allocated frames.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
When choosing a frame to be evicted, we use the Clock Algorithm,
which effectively approximates the LRU page.

The algorithm begins advancing the clock hand to the first unpinned frame. 
If no frames are unpinned, it causes the kernel to PANIC. 
Once it has found the first unpinned frame, it continues to loop through the 
list of allocated frames until it finds a frame whose page's accessed bit is 0. 
As it searches, it sets all frames whose page's accessed bit is 1 to 0, so that
if all unpinned frames have been recently access, it will loop around and set 
that first unpinned frame that was checked to be the one to be evicted.

In the eviction function, we free the page associated with the frame to be 
evicted, advance the clock hand, and remove the evicted frame from the list of 
allocated frames.

Finally we return the frame as the one to be allocated, pin it, and put it back
on the list of allocated frames.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In page.c, we added the following to store supplemental information about memory mapped files:
/* Wrapper struct for a mmaped file */
struct page_mmap 
  {
    mapid_t id;                 /* ID of mmap*/
    struct list_elem list_elem; /* List element to place mmap in list */
    struct file *file;          /* File backing mmap */
    size_t file_size;           /* Size of above */
    struct list mmap_pages;     /* List of pages mapped to this mmap */
  };

The mmap_pages list holds the instances of the following:

/* Wrapper struct for a page in an mmap*/
struct page_mmap_elem 
  {
    struct list_elem list_elem; /* List element to put page in mmap_pages */
    void* page_addr;            /* Virtual Address of page */
  };

In the thread struct, we added:
    /* VM */
    struct list mmap_list;              /* List of process' mmap files*/
    mapid_t mmap_next_id;               /* Next availabnle mmap id */

The mmap_list holds the page_mmap structs, and mmap_next_id is a counter used to give the process's mmaped files unique id's. 

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory mapped files integrates with existing virtual memory
subsystems. Some info on memory mapping is tied into the page struct
while some is externalized in an additional structs (see above). The page fault process
only differs in where the data is loaded from a file vs swap.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We determine whether a new file mapping overlaps an existing segment
by both checking that our page table has no entries, and pagedir_get_page
returns null, for the addresses that our file mapping encompasses
(meaning no physical address corresponds to those virtual addresses).


---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

 Our implementation shares most of the code between both situations. 
Both situations create an mmap object that is added to the running thread
and associates as many pages as the file needs to be in memory. We did this
for simplicity sake. Seeing as the framework already existed to map pages to
a file it was easiest to just use it. The only difference is that we update the 
pages allocated for executables to evict to a swap slot if they are writable
and if they are not writeable, we simply clear them without writing them anywhere
but rewrite them from file when they're paged back in.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
